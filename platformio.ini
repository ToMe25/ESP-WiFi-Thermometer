; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
name = "ESP WiFi Thermometer"
default_envs =
	esp32dev
	esp32dev_debug
	esp32dev_ota
	esp32dev_ota_debug
	esp32dev_dsm
	esp32dev_dsm_debug
	esp_wroom_02
	esp_wroom_02_debug
	esp_wroom_02_ota
	esp_wroom_02_ota_debug
	esp_wroom_02_dsm
	esp_wroom_02_dsm_debug

[env]
framework = arduino
monitor_speed = 115200
upload_speed = 921600
extra_scripts =
	pre:shared/compress_web.py
	pre:shared/generate_hash_header.py
	pre:shared/generate_version_header.py
lib_deps =
	ArduinoOTA
	ESPAsyncWebServer = https://github.com/me-no-dev/ESPAsyncWebServer.git#7f37534
	marvinroger/AsyncMqttClient@^0.9.0
	adafruit/DHT sensor library@^1.4.4
	milesburton/DallasTemperature@^3.11.0
board_build.embed_txtfiles =
	wifissid.txt
	wifipass.txt
	otapass.txt
	mqttuser.txt
	mqttpass.txt
	data/index.html
	data/error.html
board_build.embed_files =
	data/gzip/main.css.gz
	data/gzip/index.js.gz
	data/gzip/manifest.json.gz
	data/gzip/favicon.ico.gz
	data/gzip/favicon.png.gz
	data/gzip/favicon.svg.gz
; The C++ version is a default for platforms that don't specify one.
build_flags =
	-std=c++11
	-Wall
test_framework = unity

[debug]
build_type = debug
build_flags =
    -D CORE_DEBUG_LEVEL=5
    -D DHT_DEBUG

[env:native]
platform = native
framework =
lib_deps = UZLibGzipWrapper

[env:native_debug]
extends = env:native, debug
build_flags =
    ${env:native.build_flags}
    ${debug.build_flags}

[env:esp32dev]
platform = espressif32@^6.4.0
board = esp32dev

[env:esp32dev_debug]
extends = env:esp32dev, debug
build_flags =
    ${env:esp32dev.build_flags}
    ${debug.build_flags}

[env:esp32dev_ota]
extends = env:esp32dev
upload_protocol = espota
upload_port = esp-wifi-thermometer.local
extra_scripts =
    ${env.extra_scripts}
    post:shared/read_ota_pass.py
build_flags =
    ${env:esp32dev.build_flags}
    -D ENABLE_ARDUINO_OTA=1

[env:esp32dev_ota_debug]
extends = env:esp32dev_ota, debug
build_flags =
    ${env:esp32dev_ota.build_flags}
    ${debug.build_flags}

[env:esp32dev_dsm]
extends = env:esp32dev
build_flags =
    ${env:esp32dev.build_flags}
    -D ENABLE_DEEP_SLEEP_MODE=1

[env:esp32dev_dsm_debug]
extends = env:esp32dev_dsm, debug
build_flags =
    ${env:esp32dev_dsm.build_flags}
    ${debug.build_flags}

[env:esp_wroom_02]
platform = https://github.com/ToMe25/platform-espressif8266.git#embed_files
board = esp_wroom_02

[env:esp_wroom_02_debug]
extends = env:esp_wroom_02, debug
build_flags =
    ${env:esp_wroom_02.build_flags}
    ${debug.build_flags}

[env:esp_wroom_02_ota]
extends = env:esp_wroom_02
upload_protocol = espota
upload_port = esp-wifi-thermometer.local
extra_scripts =
    ${env.extra_scripts}
    post:shared/read_ota_pass.py
build_flags =
    ${env:esp_wroom_02.build_flags}
    -D ENABLE_ARDUINO_OTA=1

[env:esp_wroom_02_ota_debug]
extends = env:esp_wroom_02_ota, debug
build_flags =
    ${env:esp_wroom_02_ota.build_flags}
    ${debug.build_flags}

[env:esp_wroom_02_dsm]
extends = env:esp_wroom_02
build_flags =
    ${env:esp_wroom_02.build_flags}
    -D ENABLE_DEEP_SLEEP_MODE=1

[env:esp_wroom_02_dsm_debug]
extends = env:esp_wroom_02_dsm, debug
build_flags =
    ${env:esp_wroom_02_dsm.build_flags}
    ${debug.build_flags}
